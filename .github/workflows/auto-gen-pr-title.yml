name: Auto PR Title

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  generate-title:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate PR Title
        id: pr-title
        uses: actions/github-script@v7
        with:
          script: |
            const files = await github.rest.pulls.listFiles({
              ...context.repo,
              pull_number: context.payload.pull_request.number
            });

            // Determine type based on changes
            let type = 'chore';
            if (files.data.some(f => f.filename.includes('test'))) type = 'test';
            if (files.data.some(f => f.filename.includes('docs'))) type = 'docs';
            if (files.data.some(f => f.filename.match(/\.(ts|js|tsx|jsx)$/))) type = 'feat';
            if (files.data.some(f => f.filename.includes('fix'))) type = 'fix';

            // Get first commit message
            const commits = await github.rest.pulls.listCommits({
              ...context.repo,
              pull_number: context.payload.pull_request.number
            });

            const firstCommit = commits.data[0].commit.message.split('\n')[0];
            const scope = context.payload.pull_request.base.ref;

            const title = `${type}(${scope}): ${firstCommit}`;

            await github.rest.pulls.update({
              ...context.repo,
              pull_number: context.payload.pull_request.number,
              title: title
            });
